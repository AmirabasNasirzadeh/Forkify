
/** Fractional Buffer stream */

var util = require('util');
var Stream = require('stream').Stream;

module.exports.FractionStream = FractionStream;

module.exports.createStream = function(buf, opts) {
  return new FractionStream(buf, opts);
};

function FractionStream(data, options) {
  options = options || {};
  Stream.call(this);
  this.readable = true;
  this.data = data;
  this.bufferSize = options.bufferSize || 1024 * 64;
  this.start = options.start || 0;
  this.end = options.end || data.length;
  process.nextTick(this.send.bind(this));
};

util.inherits(FractionStream, Stream);

FractionStream.prototype.send = function() {
  var self  = this;
  var data  = this.data;
  var size  = this.bufferSize;
  var start = this.start;
  var end   = this.end;

  ;(function sendChunk() {
    if (start < end ) {
      var dist = start + size;
      if (dist > end) dist = end;
      var slice = data.slice(start, dist);
      start = dist;
      self.emit('data', slice);
      process.nextTick(sendChunk);
    } else {
      self.emit('end');
    };

  })();

};
